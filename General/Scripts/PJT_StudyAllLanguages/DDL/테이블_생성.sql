-- 유저 테이블 생성
CREATE TABLE USER_INFO(
	NO				VARCHAR2(7)			NOT NULL,
	ID				VARCHAR2(50)		CONSTRAINT USER_PK PRIMARY KEY,
	PASSWORD		VARCHAR2(50),
	NAME			VARCHAR2(20)		NOT NULL,
	EMAIL			VARCHAR2(50)		NOT NULL,
	PHONE			VARCHAR2(30)		NOT NULL,
	POSTAL_NO		NUMBER(6)			UNIQUE,
	ROLE_DIV_CD		VARCHAR2(10)		DEFAULT 'USER' NOT NULL,
	SOCIAL_ID_TYPE	VARCHAR2(10),
	SOCIAL_ID_YN	CHAR(1)				DEFAULT 'N' NOT NULL,
	FIRST_REG_DATE	TIMESTAMP			DEFAULT SYSTIMESTAMP,
	LAST_MOD_DATE	DATE
);

-- 유저주소이력 테이블 생성
CREATE TABLE USER_ADDR_HST (
    CHG_HST_NO 			NUMBER(7) 		CONSTRAINT USER_ADDR_HST_PK PRIMARY KEY,
    ID 					VARCHAR(50) 	CONSTRAINT USER_ADDR_HST_FK REFERENCES USER_INFO(ID),
    POSTAL_NO 			NUMBER(6) 		NOT NULL,
    BASE_ADDR 			VARCHAR2(100) 	NOT NULL,
    SIDO 				VARCHAR2(20) 	NOT NULL,
    SIGUNGU 			VARCHAR2(20) 	NOT NULL,
    EUPMYEONRO 			VARCHAR2(20),
    DONG 				VARCHAR2(20),
    DTL_ADDR 			VARCHAR2(30),
    ADDR_TYPE 			VARCHAR2(10),
    IS_DEFAULT 			CHAR(1),
    USE_YN 				CHAR(1) 		DEFAULT 'Y' NOT NULL,
    LAST_ADDR_CHG_DATE 	TIMESTAMP 		DEFAULT SYSTIMESTAMP
);

-- 공통코드 테이블 생성
-- IOT 테이블로 생성 : ORGANIZATION INDEX + 옵션
-- 각 인덱스 블록에서 10%의 공간을 비워둠(PCTFREE 10) 추가적인 UPDATE 작업을 할때 성능 최적화를 위해
-- 속성 DESCRIPTION은 Overflow 영역에 생성
-- 나머지 속성은 B-Tree 영역에 생성
-- SELECT * FROM COMN_CODE -> B-Tree 영역과 OVERFLOW 영역 다 접근을 해야하기 때문에 성능저하
-- SELECT * FROM COMN_CODE WHERE ID = 'ENGLISH'는 B-Tree 영역에서 인덱스에 접근하기 때문에 성능향상 
CREATE TABLE COMN_CODE(
	ID					VARCHAR2(20)	CONSTRAINT COMN_CODE_PK PRIMARY KEY,
	NAME				VARCHAR2(100)	NOT NULL,
	VALUE				VARCHAR2(20)	NOT NULL,
	PARENT_ID			VARCHAR2(20),
	PARENT_NAME			VARCHAR2(100),
	SORT_ORDER			NUMBER(3),
	DEPTH				NUMBER(3),
	USE_YN				CHAR(1)			DEFAULT 'Y'	NOT NULL,
	DEL_YN				CHAR(1)			DEFAULT 'N' NOT NULL,
	DESCRIPTION			VARCHAR2(255)
) ORGANIZATION INDEX PCTFREE 10
  INCLUDING DESCRIPTION OVERFLOW;

-- 다국어적재 테이블 생성
CREATE TABLE LANGUAGES_LOAD(
	HST_NO				NUMBER(7)		CONSTRAINT LANGUAGES_LOAD_PK PRIMARY KEY,
	ID					VARCHAR2(20)	CONSTRAINT LANGUAGES_LOAD_FK REFERENCES COMN_CODE(ID),
	NAME				VARCHAR2(100)	NOT NULL,
	WORD				VARCHAR2(50)	UNIQUE,
	WORD_TLN			VARCHAR2(50),
	SENTENCE			VARCHAR2(100)	UNIQUE,
	SENTENCE_TLN		VARCHAR2(100)
);

-- 전송작업 테이블 생성
CREATE TABLE TRANSFER_TASK(
	HST_NO				NUMBER(7)		NOT NULL,
	TYPE				VARCHAR2(20)	NOT NULL,
	FILE_ID				VARCHAR2(255)	CONSTRAINTS TRANSFER_TASK PRIMARY KEY,
	FILE_NAME			VARCHAR2(255)	NOT NULL,
	FILE_SIZE			VARCHAR2(20)	NOT NULL,
	FILE_PATH			VARCHAR2(255)	NOT NULL,
	FILE_ROW_TOT_CNT	NUMBER(7),
	FILE_COLL_STATUS	VARCHAR2(20),
	FILE_COLL_ERR_MSG	VARCHAR2(255),
	FILE_REG_YM			DATE			NOT NULL
)
PARTITION BY RANGE(FILE_REG_YM)
(
	PARTITION PT_202502 VALUES LESS THAN(TO_DATE('20250301', 'YYYYMMDD')),
	PARTITION PT_202503 VALUES LESS THAN(TO_DATE('20250401', 'YYYYMMDD')),
	PARTITION PT_202504 VALUES LESS THAN(TO_DATE('20250501','YYYYMMDD')),
	PARTITION PT_202505 VALUES LESS THAN(TO_DATE('20250601','YYYYMMDD')),
	PARTITION PT_202506 VALUES LESS THAN(TO_DATE('20250701', 'YYYYMMDD')),
	PARTITION PT_202507 VALUES LESS THAN(TO_DATE('20250801', 'YYYYMMDD')),
	PARTITION PT_202508 VALUES LESS THAN(TO_DATE('20250901', 'YYYYMMDD')),
	PARTITION PT_202509 VALUES LESS THAN(TO_DATE('20251001', 'YYYYMMDD')),
	PARTITION PT_202510 VALUES LESS THAN(TO_DATE('20251101', 'YYYYMMDD')),
	PARTITION PT_202511 VALUES LESS THAN(TO_DATE('20251201', 'YYYYMMDD'))
) TABLESPACE USERS;


SELECT TO_DATE('20250501', 'YYYYMMDD') FROM DUAL;

SELECT * FROM DBA_TABLESPACES;

-- 전송작업로그 테이블 생성
CREATE TABLE TRANSFER_TASK_LOG(
	HST_NO				NUMBER(7)		CONSTRAINTS TRANSFER_TASK_LOG_PK PRIMARY KEY,
	FILE_ID				VARCHAR2(255)	CONSTRAINTS TRANSFER_TASK_LOG_FK REFERENCES TRANSFER_TASK(FILE_ID),
	FILE_NAME			VARCHAR2(255)	NOT NULL,
	FILE_PATH			VARCHAR2(255)	NOT NULL,
	FILE_ROW_TOT_CNT	NUMBER(10),
	FILE_COLL_STATUS	VARCHAR2(20),
	FILE_REG_YM			TIMESTAMP		DEFAULT SYSTIMESTAMP NOT NULL,
	TASK_START_TIME		DATE			NOT NULL,
	TASK_END_TIME		DATE			NOT NULL,
	PRCS_RESULT			VARCHAR2(10)	NOT NULL,
	ERR_MSG				VARCHAR2(255)
);

SELECT * FROM TAB;
